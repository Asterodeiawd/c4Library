package com.kuznetsov.c42D.Game;

import com.kuznetsov.c42D.util.alert;
import com.kuznetsov.c42D.util.animation;
import com.kuznetsov.c42D.util.graphics;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

public class Game extends Canvas implements Runnable, KeyListener, MouseListener, MouseMotionListener, MouseWheelListener, WindowListener {

    //<editor-fold defaultstate="collapsed" desc="variable init">
    private JFrame frame;
    private String frameIconUrl = "/demo/frameIcon.png";
    private boolean defaultDecorations = true;
    private boolean easterEgg0 = false;
    private int width = 300;
    private int hight = 169;
    private int scale = 3;
    private double graphicsScale = 1.0;
    private boolean visable = true;
    private boolean running = false;
    private boolean fullScreen = false;
    private Thread thread;
    private animation animation = new c4Animation();

    /**
     * The title of the Games Frame
     */
    public String title = "c4 lazy LIB 2D";
    /**
     * The last recorded frames per second of the Game
     */
    public int fps;
    /**
     * The last recorded updates per second of the Game
     */
    public int ups;
    private boolean undecorated = false;
    private double timeU = 1000000000 / 60;
    private double timeF = 1000000000 / 60;
    private static boolean Resizable = false;
    private BufferedImage image;
    private int[] pixels;
    public Engine engine;
    public graphics graphics;
    /**
     * only the tilte will be displayed on the frame's title
     */
    public static final int TITLE_ONLY = 0;
    /**
     * only the Debug info will be displayed on the frame's title
     */
    public static final int DEBUG = 1;
    /**
     * both the tilte and Debug info will be displayed on the frame's title
     */
    public static final int TITLE_AND_DEBUG = 2;
    /**
     * what will be displayed on the frames title
     */
    public int titleMode = TITLE_ONLY;
    public int bufferStrategy = 3;
    private int defaultCloseOperation = JFrame.EXIT_ON_CLOSE;
    /**
     * game's thread will yeild and will not call update and render. an outside
     * event must unpause it
     */
    public boolean paused = false;
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="input variables">
    /**
     * the mouses last recorded x whith out scale
     */
    public int mouseX;
    /**
     * the mouses last recorded y whith out scale
     */
    public int mouseY;

    /**
     *
     */
    public int mouseXWithScale;

    /**
     *
     */
    public int mouseYWithScale;
    /**
     * is left button mouse down.
     */
    public boolean leftMouseButtonDown;
    /**
     * is right button mouse down.
     */
    public boolean rightMouseButtonDown;
    /**
     * is mouse wheel down.
     */
    public boolean mouseWheelDown;
    /**
     * the sum of all wheel rotations recorded
     */
    public double mouseWheelTotalTotaltion;
    /**
     * last recorded mouse rotation
     */
    public double mouseWheelLastRotation;
    /**
     * is window open
     */
    public boolean windowOpen;
    /**
     * is window closing
     */
    public boolean windowClosing;
    /**
     * is window iconofied
     */
    public boolean windowIconified;
    /**
     * is window Activated
     */
    public boolean windowActivated;
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="setters and getters">
    public void setMaxUpdatesPerSecond(int i) {
        timeU = 1000000000 / i;
    }
    public void setMaxFramesPerSecond(int i) {
        timeF = 1000000000 / i;
    }

    public void setAnamation(animation a) {
        animation = a;
    }

    public void setTitleMode(int i) {
        this.titleMode = i;
    }

    public void setVisable(boolean b) {
        visable = b;
        if (running) {
            frame.setVisible(b);
        }
    }

    public void setUnDecorated(boolean b) {
        undecorated = b;
        if (running) {
            frame.dispose();
            frame.setUndecorated(b);
            frame.setVisible(true);
        }
    }

    public void setSizeAndScale(int width, int hight, int scale) {
        this.width = width;
        this.hight = hight;
        this.scale = scale;
        if (running) {
            frame.setSize(width * scale, hight * scale);
            image = new BufferedImage(width, hight, BufferedImage.TYPE_INT_RGB);
            pixels = ((DataBufferInt) image.getRaster().getDataBuffer()).getData();
            graphics = new graphics(width, hight);
        }

    }

    public void setGraphicsScale(int scale) {
        graphicsScale = scale;
        if (running) {
            image = new BufferedImage(width / scale, hight / scale, BufferedImage.TYPE_INT_RGB);
            pixels = ((DataBufferInt) image.getRaster().getDataBuffer()).getData();
            graphics = new graphics(width / scale, hight / scale);
        }
    }

    public void setDefaultCloseOperation(int i) {
        this.defaultCloseOperation = i;
    }

    public void setFullScreen(boolean b) {
        fullScreen = b;
        if (running) {
            frame.dispose();
            frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
            frame.setUndecorated(b);
            frame.setVisible(true);
        }
    }

    public void setDefaultDecorations(boolean b) {
        defaultDecorations = b;

    }

    public void setEasterEgg0(boolean b) {
        easterEgg0 = b;
    }

    public void setFrameIconUrl(String s) {
        this.frameIconUrl = s;
        if (running) {
            frame.setIconImage(getFrameIcon());
        }
    }

    public void setEngine(Engine e) {

        this.engine = e;

    }

    /**
     *
     * not tested, and there is no use for it.DO NOT USE IT!!!
     *
     */
    @Deprecated
    public void setCustomGraphics(graphics g) {
        this.graphics = g;
    }
    //</editor-fold>

    public synchronized void start() {
        image = new BufferedImage(width, hight, BufferedImage.TYPE_INT_RGB);
        pixels = ((DataBufferInt) image.getRaster().getDataBuffer()).getData();
        this.setPreferredSize(new Dimension(this.width * this.scale, this.hight * this.scale));
        if (!defaultDecorations) {
            JFrame.setDefaultLookAndFeelDecorated(true);
        }
        frame = new JFrame();
        frame.setUndecorated(undecorated);
        if (fullScreen) {
            frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
            frame.setUndecorated(true);
        }
        if (!defaultDecorations) {
            if (!easterEgg0) {
                frame.setUndecorated(true);
            } else {
                frame.setUndecorated(false);
            }

        }
        frame.setIconImage(getFrameIcon());
        frame.setResizable(Resizable);
        frame.add(this);
        frame.setTitle(title);

        frame.pack();
        frame.setDefaultCloseOperation(defaultCloseOperation);
        frame.setLocationRelativeTo(null);
        frame.addWindowListener(this);

        addKeyListener(this);
        addMouseListener(this);
        addMouseMotionListener(this);
        addMouseWheelListener(this);

        graphics = new graphics(width, hight);
        running = true;
        thread = new Thread(this, "game");
        frame.setVisible(visable);
        thread.start();
    }

    protected Image creatFrameIcon() {
        BufferedImage i = new BufferedImage(16, 16, BufferedImage.TYPE_INT_RGB);
        Graphics g = i.getGraphics();
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, 15, 15);
        g.setColor(Color.RED);
        g.dispose();
        return i;

    }

    protected Image getFrameIcon() {
        if (frameIconUrl != null) {

            URL imgURL = Game.class
                    .getResource(frameIconUrl);

            try {
                return new ImageIcon(imgURL).getImage();
            } catch (NullPointerException e) {
                return creatFrameIcon();
            }
        } else {
            return creatFrameIcon();
        }
    }

    public synchronized void stop() {
        running = false;
        try {
            thread.join();
        } catch (InterruptedException e) {
            new alert("errer in " + title, "<html>errer joining threads, but its ok :)</html", e);
        } catch (NullPointerException e) {
            new alert("errer in " + title, "<html>trhread object not created, try calling start() first :(</html", e);
        }
    }

    private void updateTitle() {
        switch (titleMode) {
            case TITLE_ONLY:
                frame.setTitle(title);
                break;
            case DEBUG:
                frame.setTitle("fps:" + fps + "ups:" + ups);
                break;
            case TITLE_AND_DEBUG:
                frame.setTitle(title + " fps:" + fps + "ups:" + ups);
                break;
            default:
                System.out.println("unknown title mode, switching to default");
                titleMode = TITLE_ONLY;
                frame.setTitle(title);
                break;
        }
    }

    private void update() {
        engine.update();
    }

    @Override
    public void run() {
        long initialTime = System.nanoTime();
        double timeA = 1000000000 / 60;
        double deltaU = 0, deltaF = 0, deltaA = 0;
        int frames = 0, ticks = 0;
        long timer = System.currentTimeMillis();

        while (running) {

            long currentTime = System.nanoTime();
            deltaU += (currentTime - initialTime) / timeU;
            deltaF += (currentTime - initialTime) / timeF;
            try {
                deltaA += (currentTime - initialTime) / timeA;
            } catch (NullPointerException e) {
            }
            initialTime = currentTime;

            if (deltaU >= 1) {
                update();
                ticks++;
                deltaU--;
            }

            if (deltaF >= 1) {
                render();
                frames++;
                deltaF--;
            }
            if (deltaA >= 1) {
                if (animation != null) {
                    animation.updateAndRender(graphics);
                    if (!animation.getRunning()) {
                           animation = null;
                    }
                }
                deltaA--;
            }

            if (System.currentTimeMillis() - timer > 1000) {
                this.fps = frames;
                this.ups = ticks;
                updateTitle();
                frames = 0;
                ticks = 0;
                timer += 1000;
            }
            while (paused) {
                Thread.yield();
            }

        }
        destroy();
    }

    private void render() {
        BufferStrategy bs = getBufferStrategy();
        if (bs == null) {
            createBufferStrategy(bufferStrategy);
            return;
        }
        System.arraycopy(graphics.pixels, 0, pixels, 0, pixels.length);
        engine.render(graphics);
        Graphics g = bs.getDrawGraphics();

        g.drawImage(image, 0, 0, getWidth(), getHeight(), null);
        engine.renderJava2D(g);
        g.dispose();
        bs.show();

    }

    private void destroy() {
        frame.dispose();
        engine.destroy();
    }

//<editor-fold defaultstate="collapsed" desc="event stuff">
    @Override
    public void keyTyped(KeyEvent e) {
        engine.keyTyped(e);
    }

    @Override
    public void keyPressed(KeyEvent e) {
        System.out.println(e.getKeyCode());
        engine.keyPressed(e);
    }

    @Override
    public void keyReleased(KeyEvent e) {
        engine.keyReleased(e);
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        engine.mouseClicked(e);
    }

    @Override
    public void mousePressed(MouseEvent e) {
        switch (e.getButton()) {
            case 1:
                leftMouseButtonDown = true;
                break;
            case 2:
                mouseWheelDown = true;
                break;
            case 3:
                rightMouseButtonDown = true;
                break;
        }
        engine.mousePressed(e);
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        switch (e.getButton()) {
            case 1:
                leftMouseButtonDown = false;
                break;
            case 2:
                mouseWheelDown = false;
                break;
            case 3:
                rightMouseButtonDown = false;
                break;
        }
        engine.mouseReleased(e);
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        engine.mouseEntered(e);
    }

    @Override
    public void mouseExited(MouseEvent e) {
        engine.mouseExited(e);
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        mouseX = e.getX();
        mouseY = e.getY();
        mouseXWithScale = mouseX / scale;
        mouseYWithScale = mouseY / scale;
        engine.mouseDragged(e);
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        mouseX = e.getX();
        mouseY = e.getY();
        mouseXWithScale = (int) (mouseX / scale / graphicsScale);
        mouseYWithScale = (int) (mouseY / scale / graphicsScale);
        engine.mouseMoved(e);
    }

    @Override
    public void mouseWheelMoved(MouseWheelEvent e) {
        mouseWheelLastRotation = e.getPreciseWheelRotation();
        mouseWheelTotalTotaltion += mouseWheelLastRotation;
        engine.mouseWheelMoved(e);
    }

    @Override
    public void windowOpened(WindowEvent e) {
        windowOpen = true;
        engine.windowOpened(e);
    }

    @Override
    public void windowClosing(WindowEvent e) {
        windowClosing = true;
        engine.windowClosing(e);
    }

    @Override
    public void windowClosed(WindowEvent e) {
        windowOpen = false;
        windowClosing = false;
        engine.windowClosed(e);
    }

    @Override
    public void windowIconified(WindowEvent e) {
        windowIconified = true;
        engine.windowIconified(e);
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        windowIconified = false;
        engine.windowDeiconified(e);
    }

    @Override
    public void windowActivated(WindowEvent e) {
        windowActivated = true;
        engine.windowActivated(e);
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        windowActivated = false;
        engine.windowDeactivated(e);
    }
//</editor-fold>
}
