package com.kuznetsov.c42D.util;

public class graphics {

    public int width, hight;
    private int color = 0x000000;
    public int[] pixels;

    public graphics(int width, int hight) {
        this.width = width;
        this.hight = hight;
        this.color = 0;
        pixels = new int[width * hight];
    }

    public void clear() {
        for (int y = 0; y < hight; y++) {
            for (int x = 0; x < width; x++) {
                pixels[x + y * width] = 0;
            }
        }
    }

    public void drawSprite(int x, int y, sprite s) {
        for (int Y = 0; Y < s.hight; Y++) {
            if (Y + y >= hight) {
                break;
            }
            for (int X = 0; X < s.width; X++) {
                if (X + x >= width) {
                    break;
                }
                pixels[(x + X) + (y + Y) * width] = s.pixels[X + Y * s.width];
            }
        }
    }
        public void drawSprite(int x, int y, int angle, int cx, int cy, sprite i) {
        for (int Y = 0; Y < i.hight; Y++) {

            for (int X = 0; X < i.width; X++) {
                pixel((x + X), (y + Y), angle, cx, cy, i.pixels[X + i.width * Y]);
            }
        }
    }

    public void drawImage(int x, int y, image s) {
        for (int Y = 0; Y < s.hight; Y++) {
            if (Y + y >= hight) {
                break;
            }
            if (Y + y < 0) {
                continue;
            }
            for (int X = 0; X < s.width; X++) {
                if (X + x >= width) {
                    break;
                }
                if (X + x < 0) {
                    continue;
                }
                pixels[(x + X) + (width * (y + Y))] = s.pixels[X + s.width * Y];
            }
        }
    }

    public void drawImage(int x, int y, int angle, int cx, int cy, image i) {
        for (int Y = 0; Y < i.hight; Y++) {

            for (int X = 0; X < i.width; X++) {
                pixel((x + X), (y + Y), angle, cx, cy, i.pixels[X + i.width * Y]);
            }
        }
    }

    public void setColor(int thisColor) {
        color = thisColor;
    }

    public void drawRect(int x1, int y1, int x2, int y2) {

        for (int i = x1; i <= x2; i++) {
            pixels[i + width * y1] = color;
            pixels[i + width * y2] = color;
        }

        for (int i = y1; i <= y2; i++) {
            pixels[x1 + width * i] = color;
            pixels[x2 + width * i] = color;
        }
    }

    public void drawFillRect(int x1, int y1, int x2, int y2) {
        if (x1 < 0) {
            x1 = 0;
        }
        if (y1 < 0) {
            y1 = 0;
        }
        for (int y = y1; y < y2; y++) {
            if (y >= hight) {
                break;
            }
            for (int x = x1; x < x2; x++) {
                if (x >= width) {
                    break;
                }
                pixels[x + width * y] = this.color;
            }
        }
    }

    public void drawCircle(int x, int y, int r) {
        double angle, x1, y1;
        for (angle = 0; angle < 90; angle += 0.1) {
            x1 = r * Math.cos(angle * Math.PI / 180);
            y1 = r * Math.sin(angle * Math.PI / 180);
            pixel((int) (x + x1), (int) (y + y1)); //bottom left
            pixel((int) (x + x1), (int) (y - y1)); //top left
            pixel((int) (x - x1), (int) (y + y1)); //nottom right
            pixel((int) (x - x1), (int) (y - y1)); // top right
        }
    }

    public void drawFillCircle(int x, int y, int r) {
        double angle, x1, y1;
        for (angle = 0; angle < 90; angle += 0.1) {
            x1 = r * Math.cos(angle * Math.PI / 180);
            y1 = r * Math.sin(angle * Math.PI / 180);
            pixel((int) (x + x1), (int) (y + y1)); //bottom left
            pixel((int) (x - x1), (int) (y + y1)); //nottom right
            for (double i = x - x1; i <= x + x1; i++) {
                pixel((int) i, (int) (y + y1));
                pixel((int) i, (int) (y - y1));
            }
        }
    }

    public void drawLine(int x, int y, int x2, int y2) {
        int w = x2 - x;
        int h = y2 - y;
        int dx1 = 0, dy1 = 0, dx2 = 0, dy2 = 0;
        if (w < 0) {
            dx1 = -1;
        } else if (w > 0) {
            dx1 = 1;
        }
        if (h < 0) {
            dy1 = -1;
        } else if (h > 0) {
            dy1 = 1;
        }
        if (w < 0) {
            dx2 = -1;
        } else if (w > 0) {
            dx2 = 1;
        }
        int longest = Math.abs(w);
        int shortest = Math.abs(h);

        if (!(longest > shortest)) {
            longest = Math.abs(h);
            shortest = Math.abs(w);
            if (h < 0) {
                dy2 = -1;
            } else if (h > 0) {
                dy2 = 1;
            }
            dx2 = 0;

        }
        boolean wasValid = valid(x, y);
        int numerator = longest >> 1;
        for (int i = 0; i <= longest; i++) {
            pixel(x, y);
            if (valid(x, y)) {
                wasValid = true;
            }
            if (wasValid && !valid(x, y)) {
                return;
            }
            numerator += shortest;
            if (!(numerator < longest)) {
                numerator -= longest;
                x += dx1;
                y += dy1;
            } else {
                x += dx2;
                y += dy2;
            }
        }
    }

    public boolean valid(int x, int y) {
        if (x < 0 || y < 0 || x > width || y > hight) {
            return false;
        } else {
            return true;
        }
    }

    public void pixel(int x, int y) {
        if (x >= 0 && x < width && y >= 0 && y < hight) {
            pixels[x + width * y] = color;
        }
    }

    public void pixel(int x, int y, int thisColor) {
        if (x >= 0 && x < width && y >= 0 && y < hight) {
            pixels[x + width * y] = thisColor;
        }
    }

    public void pixel(int x, int y, int angle, double cx, double cy) {
        if (x >= 0 && x < width && y >= 0 && y < hight) {

            double s = Math.sin(angle);
            double c = Math.cos(angle);

            // translate point back to origin:
            x -= cx;
            y -= cy;

            // rotate point
            double xnew = x * c - y * s;
            double ynew = x * s + y * c;

            // translate point back:
            x = (int) (xnew + cx);
            y = (int) (ynew + cy);
            pixel(x, y);
        }
    }

    public void pixel(int x, int y, int angle, int cx, int cy, int color) {
        if (x >= 0 && x < width && y >= 0 && y < hight) {

            double s = Math.sin(angle);
            double c = Math.cos(angle);

            // translate point back to origin:
            x -= cx;
            y -= cy;

            // rotate point
            double xnew = x * c - y * s;
            double ynew = x * s + y * c;

            // translate point back:
            x = (int) (xnew + cx);
            y = (int) (ynew + cy);
            pixel(x, y, color);
        }
    }
}
